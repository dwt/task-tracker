x Vue app aus dem index html irgendwie herausholen, damit highlighting etc. im editor funktioniert
    x Wenn möglich ohne gleich eine shitload an JS dependencies und extra prozesse dazu zu kriegen
    x css -> scss und gemeinsamkeiten rausziehen @mh

setup js unit testing for vue app

Dogfooding via txt Datei als Storage
    
    x handling von empty lines @mh
        x nicht darstellen in der ui
        x erhalten zwischen edits, damit die files schön bleiben
    
    jeder task soll immer eine ID haben
            man will aber jederzeit erkennen können ob die id von einem bug-tracker kommt (und dazu eine seite verlinkt ist)
            negative zahlen als inline, aber kind of nicht inline lokale IDs vergeben?
        negative zahlen für lokale ids serverseitig vergeben, sobald ein Task zum ersten mal gesehen wird
    
    kein reordering via drag'n'drop
            default kein reordering via whiteboard
            nur tagging via drag'n'drop zwischen collumns
            reordering _nur_ via text-view
            evtl. später ein 'sort task' button, der zeilen reordered
            done nach hinten, new nach vorne, in progress dazwischen
            einfach erweiterbar auf N-Spalten
        json format verändern, tasks als normales array, nicht mehr als dict
        vue function um die spalten-tasks zu kriegen (unit test this)
        vue figure out how to integrate the drag'drop component without reordering
    
    Content von tasks im textformat via zweifacher einrückung @mh
        x Kären: ist zweifache einrückung klar genug?
        x clientsieitig content erst mal nicht darstellen
        Darstellung von content auch in der textform clientseitig verhindern können?
        expand nur wenn tag gesetzt ist (später wird content vielleicht erst dann aus dem backend gezogen?)
        "uid:1...n" serverseitig vergeben wenn es keine id gibt
        wenn ein client einen task erstellt, wird serverseitig die uid vergeben
        sobald eine echte id existiert wird die uid verworfen
        text-modifikationen klären
            wie soll sich drag'n'drop auswirken?
                reordering sollte gehen
                drag in eine andere spalte -> nur tag setzen?
                    aber dabei sollte ja auch eine sortierung möglich sein?
                alternativ: reordering _nur_ im textfeld (for now)
            wird ein task in der datei verschoben wenn er fertig ist?
                bin versucht umsortieren erst mal nicht automatisch zu machen
                    dann muss ich aber vermutlich die darstellung in json aufgeben
                    und es ist immer noch nicht klar wie sich verschieben von doing -> done auf die position auswirkt
                ist das ein eigenes kommando?
                wenn ja wohin?
                    jeweils ans ende seines containers
                    vor oder nach schon andere beendete tasks
    
    x Collapse done stories by default @mh
        x do status:doing @mh
    
    render stories in the order they are written in the todotxt file
            especially not the done stories at the end
            But: that could be a really great way to maintain the readability of the todotxt format
        research if possible without changing the json format
        research how to represent the children in one list while still getting drag'n'drop to work
    
    hash-path um bei reload den ausgewählten task beizubehalten
        save current path to hash
        restore state on load from hash
    
    sichern als flat-file nach jeder änderung
        x Schreiben der txt Datei aus dem Modell
        Fix saving API to always send up the root object instead of the current task
        mit monitoring der datei ob sie sich extern ändert
    
    json talk to async server on each client action
        push full json to server
        server pushes full json back to all clients
    
    text edit wird (erstmal) manuell gepusht und pusht dann als json zurück
        klassich tabs mit bootstrap zwischen den zwei interfaces
        ganz klassisches jquery change basiertes server push

    schicker js text editor clientseitig einbinden, damit bearbeiten erst mal spaß macht
        markdown als syntax? Vielleicht eigene syntax? todotxt könnte es geben

    Change tracking dass tasks die gelöscht werden in einem `trash` bereich verschiebt.
        explizites löschen aus dem trasch? Oder doch Zeit-Basiert?

Trac importer / exporter
    ansatz von robert für den daily reporter verwenden?
    link generierung in backends konfigurierbar machen
    negative (lokale) ids nicht verlinken

Live Multi-User Web App
        Async Flask app und sync mit dem server on browser changes
        socket.io? was benutzt man da am besten für websockets?

Text parsing / Textformat
    discuss: Wie escapen wir Symbole mit syntaktischer Bedeuting? (@, +, a:b)

Tasks bearbeiten mittels content editable auf doppelklick?
    ganz klassich, submit on change und/ oder bei enter
    in jedem fall sollte der edit bereich entweder größer oder auto resizing sein, damit man komfortabel tippen kann
