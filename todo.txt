Dogfooding via txt Datei als Storage
    
    x handling von empty lines @mh
        x nicht darstellen in der ui
        x erhalten zwischen edits, damit die files schön bleiben
        
    Content von tasks im textformat via zweifacher einrückung @mh
        x Kären: ist zweifache einrückung klar genug?
        x clientsieitig content erst mal nicht darstellen
        Darstellung von content auch in der textform clientseitig verhindern können?
        expand nur wenn tag gesetzt ist (später wird content vielleicht erst dann aus dem backend gezogen?)
        "uid:1...n" serverseitig vergeben wenn es keine id gibt
        wenn ein client einen task erstellt, wird serverseitig die uid vergeben
        sobald eine echte id existiert wird die uid verworfen
    
    x Collapse done stories by default @mh
        x do status:doing @mh
    
    render stories in the order they are written in the todotxt file
            especially not the done stories at the end
            But: that could be a really great way to maintain the readability of the todotxt format
        research if possible without changing the json format
        research how to represent the children in one list while still getting drag'n'drop to work
    
    hash-path um bei reload den ausgewählten task beizubehalten
        save current path to hash
        restore state on load from hash
    
    sichern als flat-file nach jeder änderung
        x Schreiben der txt Datei aus dem Modell
        Fix saving API to always send up the root object instead of the current task
        mit monitoring der datei ob sie sich extern ändert
    
    json talk to async server on each client action
        push full json to server
        server pushes full json back to all clients
    
    text edit wird (erstmal) manuell gepusht und pusht dann als json zurück
        klassich tabs mit bootstrap zwischen den zwei interfaces
        ganz klassisches jquery change basiertes server push

    schicker js text editor clientseitig einbinden, damit bearbeiten erst mal spaß macht
        markdown als syntax? Vielleicht eigene syntax? todotxt könnte es geben

    Change tracking dass tasks die gelöscht werden in einem `trash` bereich verschiebt.
        explizites löschen aus dem trasch? Oder doch Zeit-Basiert?


Breadcrumbs
    Bug: Virtuelles Root-Element in Breadcrumbs

Text parsing / Textformat
    discuss: Wie escapen wir Symbole mit syntaktischer Bedeuting? (@, +, a:b)

Tasks bearbeiten mittels content editable auf doppelklick?
    ganz klassich, submit on change und/ oder bei enter
    in jedem fall sollte der edit bereich entweder größer oder auto resizing sein, damit man komfortabel tippen kann

Vue app aus dem index html irgendwie herausholen, damit highlighting etc. im editor funktioniert
    Wenn möglich ohne gleich eine shitload an JS dependencies und extra prozesse dazu zu kriegen

Trac importer / exporter
    ansatz von robert für den daily reporter verwenden?

Async Flask app und sync mit dem server on browser changes
    socket.io? was benutzt man da am besten für websockets?

Erzeuge backlinks für issue tracker
    the pattern for the URL probably needs to be a configuration option?